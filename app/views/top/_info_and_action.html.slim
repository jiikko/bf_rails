div style='height:50px'
  span data-role='buy_1'
  br
  span data-role='buy_5'

table border=1 style='text-align: center;'
  tr
    th 最終取引価格
    th チャートの形
    th public API(上限:500回/分)
    th private API(上限:200回/分)
  tr
    td
      h3#last_trade_price
    td#price_directions
    td
      span#public_api_call_logs_count
      |/分
    td
      span#private_api_call_logs_count
      |/分
  tr
    th BF負荷
    /th 取引所ステータス
    th BFサーバステータス
    th
    th
  tr
    td
      div#health_meter style='margin-left: auto; marign-right: auto;'
    /td#status_health_message
    td#bf_status
    th
    th
  tr
    th ロット数
    th 利益値幅
    th
    th
  tr
    td = BF::Setting.record.order_size
    td = BF::Setting.record.order_range
    th
    th
  tr
    th 保有枚数
    th
    th
    th
  tr
    td = BF::MyTradeShip.running.includes(:buy_trade).map { |x| x.buy_trade.size }.sum.to_f
    td
    th
    th


table.mt20 border=1 style='text-align: center;'
  tr
    th colspan=3 ジョブ
  tr
    td = button_to '自動発注', api_run_one_scalping_path, method: :post, remote: true, class: 'button job'
    td = button_to '繰り返し自動発注', api_run_endless_scalping_path, method: :post, remote: true, class: 'button job'
    td = button_to '約定確認', api_run_remove_waiting_trading_path(s: 2), method: :post, remote: true, class: 'button job'
  tr
    td = button_to '非同期ジョブの全停止', destroy_all_resque_jobs_path, method: :delete, remote: true, class: 'button job'
    td
    td
  tr
    th colspan=3 設定変更
  tr
    td = button_to 'ロット数を0.01にする', setting_path(bf_setting: { order_size: '0.01' }, from: root_url), method: :patch, class: 'button update'
    td = button_to 'ロット数を0.1にする', setting_path(bf_setting: { order_size: '0.1' }, from: root_url), method: :patch, class: 'button update'
    td = button_to 'ロット数を0.2にする', setting_path(bf_setting: { order_size: '0.2' }, from: root_url), method: :patch, class: 'button update'
